import streamlit as st
import pandas as pd
import aiohttp
import asyncio
from datetime import datetime, timedelta, timezone

API_URL = "http://localhost:8000/events/by-range"
API_URL_HOURS = "http://localhost:8000/events/by-hours"

st.set_page_config(page_title="Marathonbet Results", layout="wide")
st.title("üìä Marathonbet Results Viewer")

# -- Select mode
mode = st.radio("üîÑ –†–µ–∂–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó", ["–ê–±—Å–æ–ª—é—Ç–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω", "–û—Å—Ç–∞–Ω–Ω—ñ N –≥–æ–¥–∏–Ω"], horizontal=True)

# -- Input fields
if mode == "–û—Å—Ç–∞–Ω–Ω—ñ N –≥–æ–¥–∏–Ω":
    hours_back = st.slider("‚è±Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞–∑–∞–¥", min_value=1, max_value=48, value=12)
    params = {"hours_back": str(hours_back)}
    endpoint = API_URL_HOURS

else:
    col1, col2 = st.columns(2)
    with col1:
        from_date = st.date_input("üìÖ –í—ñ–¥ –¥–∞—Ç–∏", format="YYYY.MM.DD")
    with col2:
        to_date = st.date_input("üìÖ –î–æ –¥–∞—Ç–∏", format="YYYY.MM.DD")

    # Show info box (dismissable)
    if "show_info_box" not in st.session_state:
        st.session_state.show_info_box = True

    if st.session_state.show_info_box:
        with st.container():
            col1, col2 = st.columns([0.9, 0.1])
            with col1:
                st.info("üì• –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ, –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ. "
                        "–¶–µ –Ω–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è ‚Äî –ª–∏—à–µ –Ω–æ–≤—ñ –¥–Ω—ñ –±—É–¥–µ –¥–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
            with col2:
                if st.button("‚ùå", key="dismiss_info_popup"):
                    st.session_state.show_info_box = False

    # Warning for long date range
    if (to_date - from_date).days > 31:
        st.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±–∏—Ä–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 31 –¥–Ω—è - –º–æ–∂–µ –¥–æ–≤–≥–æ –æ–±—Ä–æ–±–ª—é–≤–∞—Ç–∏—Å—å.")

# -- Fetch data
async def fetch_results(params: dict, endpoint: str) -> dict:
    async with aiohttp.ClientSession() as session:
        async with session.get(endpoint, params=params) as resp:
            if resp.status != 200:
                raise Exception(await resp.text())
            return await resp.json()

# -- Load button
if st.button("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"):
    if mode == "–ê–±—Å–æ–ª—é—Ç–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω" and from_date > to_date:
        st.warning("‚ö†Ô∏è '–í—ñ–¥' –¥–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ '–î–æ' –¥–∞—Ç—ñ.")
    else:
        params = {}
        endpoint = API_URL

        if mode == "–û—Å—Ç–∞–Ω–Ω—ñ N –≥–æ–¥–∏–Ω":
            params = {"hours_back": str(hours_back)}
            endpoint = API_URL_HOURS
        else:
            params = {
                "from_date": from_date.strftime("%Y.%m.%d"),
                "to_date": to_date.strftime("%Y.%m.%d")
            }

        with st.spinner("‚è≥ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö..."):
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                data = loop.run_until_complete(fetch_results(params, endpoint))

                if not data.get("events"):
                    st.info("üö´ –î–∞–Ω—ñ –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
                else:
                    df = pd.DataFrame(data["events"])
                    st.session_state["events_df"] = df
                    st.success(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–¥—ñ–π: {data['total']}")

            except Exception as e:
                st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É: {str(e)}")

# -- Filters and Table
if "events_df" in st.session_state:
    df = st.session_state["events_df"]

    st.markdown("### üîé –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è")

    col1, col2 = st.columns(2)
    with col1:
        sport_options = [""] + sorted(df["sport"].dropna().astype(str).unique())
        selected_sport = st.selectbox("üéΩ –í–∏–¥ —Å–ø–æ—Ä—Ç—É", options=sport_options)
    with col2:
        tournament_options = [""] + sorted(df["tournament"].dropna().astype(str).unique())
        selected_tournament = st.selectbox("üèÜ –¢—É—Ä–Ω—ñ—Ä", options=tournament_options)

    filtered_df = df.copy()
    if selected_sport:
        filtered_df = filtered_df[filtered_df["sport"].astype(str) == selected_sport]
    if selected_tournament:
        filtered_df = filtered_df[filtered_df["tournament"].astype(str) == selected_tournament]

    st.markdown(f"#### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {len(filtered_df)}")
    st.dataframe(filtered_df, use_container_width=True)
